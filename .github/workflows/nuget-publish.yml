name: Publish NuGet Packages

on:
  push:
    tags:
      - 'v*'  # Runs when pushing a tag like v1.0.0

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  PKG_REGISTRY: https://nuget.pkg.github.com/Sinet2000/index.json
  DOTNET_NOLOGO: true
  NuGetDirectory: ${{ github.workspace}}/nuget
  
defaults:
  run:
    shell: pwsh
  
jobs:
  create_nuget:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Get all history to allow automatic versioning using MinVer
      
      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        
      - name: Restore dependencies
        run: dotnet restore

      - name: Build solution
        run: dotnet build --configuration Release --no-restore

      - name: 'Get Version'
        id: version
        uses: battila7/get-version-action@v2

      - name: Pack MidTempoHub.Messaging.Email
        run: dotnet pack src/MidTempoHub.Messaging.Email/MidTempoHub.Messaging.Email.csproj --configuration Release -p:PackageVersion=${{ steps.version.outputs.version-without-v }} --output ${{ env.NuGetDirectory }}

      - name: Pack MidTempoHub.Messaging.Telegram
        run: dotnet pack src/MidTempoHub.Messaging.Telegram/MidTempoHub.Messaging.Telegram.csproj --configuration Release -p:PackageVersion=${{ steps.version.outputs.version-without-v }} --output ${{ env.NuGetDirectory }}
        
      # Publish the NuGet package as an artifact, so they can be used in the following jobs
      - uses: actions/upload-artifact@v4
        with:
          name: nuget
          if-no-files-found: error
          retention-days: 7
          path: ${{ env.NuGetDirectory }}/*.nupkg

  run_test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
      - name: Run tests
        run: dotnet test MidTempo.Messaging.sln --configuration Release

  deploy:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    needs: [ create_nuget, run_test ]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: nuget
          path: ${{ env.NuGetDirectory }}

      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Authenticate to nuget registry
        run: dotnet nuget add source --username Sinet2000 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text --name github "${{ env.PKG_REGISTRY }}"

      - name: Publish NuGet package
        run: |
          foreach($file in (Get-ChildItem "${{ env.NuGetDirectory }}" -Recurse -Include *.nupkg)) {
              dotnet nuget push $file --source "github" --skip-duplicate
          }